/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import type { Provider, TransactionRequest } from "@ethersproject/providers";
import type { PromiseOrValue } from "../../common";
import type { Todos, TodosInterface } from "../../contracts/Todos";

const _abi = [
  {
    inputs: [
      {
        internalType: "string",
        name: "_text",
        type: "string",
      },
    ],
    name: "create",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    name: "getTodo",
    outputs: [
      {
        components: [
          {
            internalType: "uint256",
            name: "id",
            type: "uint256",
          },
          {
            internalType: "string",
            name: "text",
            type: "string",
          },
          {
            internalType: "bool",
            name: "completed",
            type: "bool",
          },
          {
            internalType: "address",
            name: "owner",
            type: "address",
          },
        ],
        internalType: "struct Todos.Todo",
        name: "",
        type: "tuple",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [],
    name: "nextId",
    outputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "",
        type: "uint256",
      },
    ],
    name: "todos",
    outputs: [
      {
        internalType: "uint256",
        name: "id",
        type: "uint256",
      },
      {
        internalType: "string",
        name: "text",
        type: "string",
      },
      {
        internalType: "bool",
        name: "completed",
        type: "bool",
      },
      {
        internalType: "address",
        name: "owner",
        type: "address",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
  {
    inputs: [
      {
        internalType: "uint256",
        name: "_id",
        type: "uint256",
      },
    ],
    name: "toggleCompleted",
    outputs: [],
    stateMutability: "nonpayable",
    type: "function",
  },
] as const;

const _bytecode =
  "0x6080604052600060015534801561001557600080fd5b50610f63806100256000396000f3fe608060405234801561001057600080fd5b50600436106100575760003560e01c8063455f50241461005c57806361b8ce8c14610078578063b6a46b3b14610096578063bc8bc2b4146100b2578063dd68afb6146100e5575b600080fd5b610076600480360381019061007191906106c8565b610115565b005b61008061023b565b60405161008d9190610704565b60405180910390f35b6100b060048036038101906100ab9190610865565b610241565b005b6100cc60048036038101906100c791906106c8565b61034c565b6040516100dc9493929190610989565b60405180910390f35b6100ff60048036038101906100fa91906106c8565b610441565b60405161010c9190610aaf565b60405180910390f35b3373ffffffffffffffffffffffffffffffffffffffff16600082815481106101405761013f610ad1565b5b906000526020600020906003020160020160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16146101c8576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016101bf90610b4c565b60405180910390fd5b600081815481106101dc576101db610ad1565b5b906000526020600020906003020160020160009054906101000a900460ff1615600082815481106102105761020f610ad1565b5b906000526020600020906003020160020160006101000a81548160ff02191690831515021790555050565b60015481565b6000604051806080016040528060015481526020018381526020016000151581526020013373ffffffffffffffffffffffffffffffffffffffff1681525090806001815401808255809150506001900390600052602060002090600302016000909190919091506000820151816000015560208201518160010190816102c79190610d78565b5060408201518160020160006101000a81548160ff02191690831515021790555060608201518160020160016101000a81548173ffffffffffffffffffffffffffffffffffffffff021916908373ffffffffffffffffffffffffffffffffffffffff16021790555050506001600081548092919061034490610e79565b919050555050565b6000818154811061035c57600080fd5b906000526020600020906003020160009150905080600001549080600101805461038590610b9b565b80601f01602080910402602001604051908101604052809291908181526020018280546103b190610b9b565b80156103fe5780601f106103d3576101008083540402835291602001916103fe565b820191906000526020600020905b8154815290600101906020018083116103e157829003601f168201915b5050505050908060020160009054906101000a900460ff16908060020160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff16905084565b61044961063e565b600073ffffffffffffffffffffffffffffffffffffffff166000838154811061047557610474610ad1565b5b906000526020600020906003020160020160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16036104fd576040517f08c379a00000000000000000000000000000000000000000000000000000000081526004016104f490610f0d565b60405180910390fd5b6000828154811061051157610510610ad1565b5b90600052602060002090600302016040518060800160405290816000820154815260200160018201805461054490610b9b565b80601f016020809104026020016040519081016040528092919081815260200182805461057090610b9b565b80156105bd5780601f10610592576101008083540402835291602001916105bd565b820191906000526020600020905b8154815290600101906020018083116105a057829003601f168201915b505050505081526020016002820160009054906101000a900460ff161515151581526020016002820160019054906101000a900473ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff1673ffffffffffffffffffffffffffffffffffffffff16815250509050919050565b60405180608001604052806000815260200160608152602001600015158152602001600073ffffffffffffffffffffffffffffffffffffffff1681525090565b6000604051905090565b600080fd5b600080fd5b6000819050919050565b6106a581610692565b81146106b057600080fd5b50565b6000813590506106c28161069c565b92915050565b6000602082840312156106de576106dd610688565b5b60006106ec848285016106b3565b91505092915050565b6106fe81610692565b82525050565b600060208201905061071960008301846106f5565b92915050565b600080fd5b600080fd5b6000601f19601f8301169050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052604160045260246000fd5b61077282610729565b810181811067ffffffffffffffff821117156107915761079061073a565b5b80604052505050565b60006107a461067e565b90506107b08282610769565b919050565b600067ffffffffffffffff8211156107d0576107cf61073a565b5b6107d982610729565b9050602081019050919050565b82818337600083830152505050565b6000610808610803846107b5565b61079a565b90508281526020810184848401111561082457610823610724565b5b61082f8482856107e6565b509392505050565b600082601f83011261084c5761084b61071f565b5b813561085c8482602086016107f5565b91505092915050565b60006020828403121561087b5761087a610688565b5b600082013567ffffffffffffffff8111156108995761089861068d565b5b6108a584828501610837565b91505092915050565b600081519050919050565b600082825260208201905092915050565b60005b838110156108e85780820151818401526020810190506108cd565b60008484015250505050565b60006108ff826108ae565b61090981856108b9565b93506109198185602086016108ca565b61092281610729565b840191505092915050565b60008115159050919050565b6109428161092d565b82525050565b600073ffffffffffffffffffffffffffffffffffffffff82169050919050565b600061097382610948565b9050919050565b61098381610968565b82525050565b600060808201905061099e60008301876106f5565b81810360208301526109b081866108f4565b90506109bf6040830185610939565b6109cc606083018461097a565b95945050505050565b6109de81610692565b82525050565b600082825260208201905092915050565b6000610a00826108ae565b610a0a81856109e4565b9350610a1a8185602086016108ca565b610a2381610729565b840191505092915050565b610a378161092d565b82525050565b610a4681610968565b82525050565b6000608083016000830151610a6460008601826109d5565b5060208301518482036020860152610a7c82826109f5565b9150506040830151610a916040860182610a2e565b506060830151610aa46060860182610a3d565b508091505092915050565b60006020820190508181036000830152610ac98184610a4c565b905092915050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052603260045260246000fd5b7f4e6f7420746865206f776e6572206f66207468697320746f646f000000000000600082015250565b6000610b36601a836108b9565b9150610b4182610b00565b602082019050919050565b60006020820190508181036000830152610b6581610b29565b9050919050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052602260045260246000fd5b60006002820490506001821680610bb357607f821691505b602082108103610bc657610bc5610b6c565b5b50919050565b60008190508160005260206000209050919050565b60006020601f8301049050919050565b600082821b905092915050565b600060088302610c2e7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff82610bf1565b610c388683610bf1565b95508019841693508086168417925050509392505050565b6000819050919050565b6000610c75610c70610c6b84610692565b610c50565b610692565b9050919050565b6000819050919050565b610c8f83610c5a565b610ca3610c9b82610c7c565b848454610bfe565b825550505050565b600090565b610cb8610cab565b610cc3818484610c86565b505050565b5b81811015610ce757610cdc600082610cb0565b600181019050610cc9565b5050565b601f821115610d2c57610cfd81610bcc565b610d0684610be1565b81016020851015610d15578190505b610d29610d2185610be1565b830182610cc8565b50505b505050565b600082821c905092915050565b6000610d4f60001984600802610d31565b1980831691505092915050565b6000610d688383610d3e565b9150826002028217905092915050565b610d81826108ae565b67ffffffffffffffff811115610d9a57610d9961073a565b5b610da48254610b9b565b610daf828285610ceb565b600060209050601f831160018114610de25760008415610dd0578287015190505b610dda8582610d5c565b865550610e42565b601f198416610df086610bcc565b60005b82811015610e1857848901518255600182019150602085019450602081019050610df3565b86831015610e355784890151610e31601f891682610d3e565b8355505b6001600288020188555050505b505050505050565b7f4e487b7100000000000000000000000000000000000000000000000000000000600052601160045260246000fd5b6000610e8482610692565b91507fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff8203610eb657610eb5610e4a565b5b600182019050919050565b7f546f646f20646f6573206e6f7420657869737400000000000000000000000000600082015250565b6000610ef76013836108b9565b9150610f0282610ec1565b602082019050919050565b60006020820190508181036000830152610f2681610eea565b905091905056fea26469706673582212202cd66b1a63dc104ca79e113d77e30abaacf17a08bb203a918a9c081db6b7817164736f6c63430008110033";

type TodosConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: TodosConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Todos__factory extends ContractFactory {
  constructor(...args: TodosConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
  }

  override deploy(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): Promise<Todos> {
    return super.deploy(overrides || {}) as Promise<Todos>;
  }
  override getDeployTransaction(
    overrides?: Overrides & { from?: PromiseOrValue<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  override attach(address: string): Todos {
    return super.attach(address) as Todos;
  }
  override connect(signer: Signer): Todos__factory {
    return super.connect(signer) as Todos__factory;
  }

  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TodosInterface {
    return new utils.Interface(_abi) as TodosInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Todos {
    return new Contract(address, _abi, signerOrProvider) as Todos;
  }
}
